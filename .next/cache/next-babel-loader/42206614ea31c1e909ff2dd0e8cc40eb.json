{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport auth0 from 'auth0-js';\nimport { AUTH_CONFIG } from './auth0-variables';\nimport jwtDecode from 'jwt-decode';\n\nconst getQueryParams = () => {\n  const params = {};\n  window.location.href.replace(/([^(?|#)=&]+)(=([^&]*))?/g, ($0, $1, $2, $3) => {\n    params[$1] = $3;\n  });\n  return params;\n};\n\nexport default class Auth {\n  constructor() {\n    _defineProperty(this, \"accessToken\", void 0);\n\n    _defineProperty(this, \"idToken\", void 0);\n\n    _defineProperty(this, \"expiresAt\", void 0);\n\n    _defineProperty(this, \"auth0\", new auth0.WebAuth({\n      domain: AUTH_CONFIG.domain,\n      clientID: AUTH_CONFIG.clientId,\n      redirectUri: AUTH_CONFIG.callbackUrl,\n      responseType: 'token id_token',\n      scope: 'openid profile email'\n    }));\n\n    _defineProperty(this, \"extractInfoFromHash\", () => {\n      if (process.server) return;\n      const {\n        id_token\n      } = getQueryParams();\n      return {\n        token: id_token,\n        user_details: jwtDecode(id_token)\n      };\n    });\n\n    _defineProperty(this, \"getQueryParams\", () => {\n      const params = {};\n      window.location.href.replace(/([^(?|#)=&]+)(=([^&]*))?/g, ($0, $1, $2, $3) => {\n        params[$1] = $3;\n      });\n      return params;\n    });\n\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getIdToken = this.getIdToken.bind(this);\n    this.renewSession = this.renewSession.bind(this);\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  handleAuthentication() {\n    return new Promise(resolve => {\n      this.auth0.parseHash((err, authResult) => {\n        var user_details = this.extractInfoFromHash();\n\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult, user_details);\n          resolve(true);\n        } else if (err) {\n          console.log(err);\n          alert(`Error: ${err.error}. Check the console for further details.`);\n          resolve(false);\n          window.location.replace('/');\n        }\n      });\n    });\n  }\n\n  getAccessToken() {\n    return this.accessToken;\n  }\n\n  getIdToken() {\n    return this.idToken;\n  }\n\n  setSession(authResult, user_details) {\n    // Set isLoggedIn flag in localStorage\n    localStorage.setItem('isLoggedIn', 'true');\n    localStorage.setItem('user_details', JSON.stringify(user_details.user_details)); // Set the time that the access token will expire at\n\n    let expiresAt = authResult.expiresIn * 1000 + new Date().getTime();\n    this.accessToken = authResult.accessToken;\n    this.idToken = authResult.idToken;\n    this.expiresAt = expiresAt; // navigate to the home route\n    //history.replace('/home');\n  }\n\n  renewSession() {\n    this.auth0.checkSession({}, (err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult);\n      } else if (err) {\n        this.logout();\n        console.log(err);\n        alert(`Could not get a new token (${err.error}: ${err.error_description}).`);\n      }\n    });\n  }\n\n  logout() {\n    // Remove tokens and expiry time\n    this.accessToken = null;\n    this.idToken = null;\n    this.expiresAt = 0; // Remove isLoggedIn flag from localStorage\n\n    localStorage.removeItem('isLoggedIn');\n    localStorage.removeItem('user_details'); // navigate to the home route\n\n    window.location.replace('/');\n  }\n\n  isAuthenticated() {\n    // Check whether the current time is past the\n    // access token's expiry time\n    let expiresAt = this.expiresAt;\n    return new Date().getTime() < expiresAt;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}