{"ast":null,"code":"var _jsxFileName = \"/home/admin/Desktop/acamica/client/components/Pagination.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Pagination from \"react-bootstrap/Pagination\";\nexport const PaginationTable = ({\n  lengthArray,\n  sizePage,\n  setpageActual,\n  pageActual\n}) => {\n  /* Numbers of Page */\n  let numberPages = lengthArray / sizePage;\n  numberPages = Number.isInteger(numberPages) ? numberPages : Math.trunc(numberPages) + 1;\n  let items = [];\n  console.log(pageActual);\n  console.log(numberPages);\n\n  for (let number = 1; number <= numberPages; number++) {\n    items.push(__jsx(Pagination.Item, {\n      key: number,\n      active: number === pageActual,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, number));\n  }\n\n  return __jsx(Pagination, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, __jsx(Pagination.First, {\n    onClick: () => setpageActual(1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), __jsx(Pagination.Prev, {\n    onClick: () => pageActual > 1 ? setpageActual(pageActual - 1) : setpageActual(pageActual),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), items, __jsx(Pagination.Next, {\n    onClick: () => {\n      pageActual < numberPages ? setpageActual(pageActual + 1) : setpageActual(pageActual);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), __jsx(Pagination.Last, {\n    onClick: () => setpageActual(numberPages),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["/home/admin/Desktop/acamica/client/components/Pagination.js"],"names":["Pagination","PaginationTable","lengthArray","sizePage","setpageActual","pageActual","numberPages","Number","isInteger","Math","trunc","items","console","log","number","push"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,4BAAvB;AAEA,OAAO,MAAMC,eAAe,GAAG,CAAC;AAC9BC,EAAAA,WAD8B;AAE9BC,EAAAA,QAF8B;AAG9BC,EAAAA,aAH8B;AAI9BC,EAAAA;AAJ8B,CAAD,KAKzB;AACJ;AACA,MAAIC,WAAW,GAAGJ,WAAW,GAAGC,QAAhC;AACAG,EAAAA,WAAW,GAAGC,MAAM,CAACC,SAAP,CAAiBF,WAAjB,IAAgCA,WAAhC,GAA8CG,IAAI,CAACC,KAAL,CAAWJ,WAAX,IAA0B,CAAtF;AAEA,MAAIK,KAAK,GAAG,EAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,UAAZ;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYP,WAAZ;;AACA,OAAK,IAAIQ,MAAM,GAAG,CAAlB,EAAqBA,MAAM,IAAIR,WAA/B,EAA4CQ,MAAM,EAAlD,EAAsD;AACpDH,IAAAA,KAAK,CAACI,IAAN,CACE,MAAC,UAAD,CAAY,IAAZ;AAAiB,MAAA,GAAG,EAAED,MAAtB;AAA8B,MAAA,MAAM,EAAEA,MAAM,KAAKT,UAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGS,MADH,CADF;AAKD;;AACD,SACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD,CAAY,KAAZ;AAAkB,IAAA,OAAO,EAAE,MAAMV,aAAa,CAAC,CAAD,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,UAAD,CAAY,IAAZ;AACE,IAAA,OAAO,EAAE,MACPC,UAAU,GAAG,CAAb,GACID,aAAa,CAACC,UAAU,GAAG,CAAd,CADjB,GAEID,aAAa,CAACC,UAAD,CAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EASGM,KATH,EAUE,MAAC,UAAD,CAAY,IAAZ;AACE,IAAA,OAAO,EAAE,MAAM;AACbN,MAAAA,UAAU,GAAGC,WAAb,GACIF,aAAa,CAACC,UAAU,GAAG,CAAd,CADjB,GAEID,aAAa,CAACC,UAAD,CAFjB;AAGD,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,EAiBE,MAAC,UAAD,CAAY,IAAZ;AAAiB,IAAA,OAAO,EAAE,MAAMD,aAAa,CAACE,WAAD,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBF,CADF;AAqBD,CAzCM","sourcesContent":["import Pagination from \"react-bootstrap/Pagination\";\n\nexport const PaginationTable = ({\n  lengthArray,\n  sizePage,\n  setpageActual,\n  pageActual\n}) => {\n  /* Numbers of Page */\n  let numberPages = lengthArray / sizePage;\n  numberPages = Number.isInteger(numberPages) ? numberPages : Math.trunc(numberPages) + 1;\n\n  let items = [];\n  console.log(pageActual)\n  console.log(numberPages )\n  for (let number = 1; number <= numberPages; number++) {\n    items.push(\n      <Pagination.Item key={number} active={number === pageActual}>\n        {number}\n      </Pagination.Item>\n    );\n  }\n  return (\n    <Pagination>\n      <Pagination.First onClick={() => setpageActual(1)} />\n      <Pagination.Prev\n        onClick={() =>\n          pageActual > 1\n            ? setpageActual(pageActual - 1)\n            : setpageActual(pageActual)\n        }\n      />\n      {items}\n      <Pagination.Next\n        onClick={() => {\n          pageActual < numberPages\n            ? setpageActual(pageActual + 1)\n            : setpageActual(pageActual);\n        }}\n      />\n      <Pagination.Last onClick={() => setpageActual(numberPages)} />\n    </Pagination>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}