{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport auth0 from \"auth0-js\";\nimport { AUTH_CONFIG } from \"./auth0-variables\";\nimport jwtDecode from \"jwt-decode\";\n\nvar getQueryParams = function getQueryParams() {\n  var params = {};\n  window.location.href.replace(/([^(?|#)=&]+)(=([^&]*))?/g, function ($0, $1, $2, $3) {\n    params[$1] = $3;\n  });\n  return params;\n};\n\nvar Auth =\n/*#__PURE__*/\nfunction () {\n  function Auth() {\n    _classCallCheck(this, Auth);\n\n    _defineProperty(this, \"accessToken\", void 0);\n\n    _defineProperty(this, \"idToken\", void 0);\n\n    _defineProperty(this, \"expiresAt\", void 0);\n\n    _defineProperty(this, \"auth0\", new auth0.WebAuth({\n      domain: AUTH_CONFIG.domain,\n      clientID: AUTH_CONFIG.clientId,\n      redirectUri: AUTH_CONFIG.callbackUrl,\n      responseType: \"token id_token\",\n      scope: \"openid profile email\"\n    }));\n\n    _defineProperty(this, \"extractInfoFromHash\", function () {\n      if (process.server) return;\n\n      var _getQueryParams = getQueryParams(),\n          id_token = _getQueryParams.id_token;\n\n      return {\n        token: id_token,\n        user_details: jwtDecode(id_token)\n      };\n    });\n\n    _defineProperty(this, \"getQueryParams\", function () {\n      var params = {};\n      window.location.href.replace(/([^(?|#)=&]+)(=([^&]*))?/g, function ($0, $1, $2, $3) {\n        params[$1] = $3;\n      });\n      return params;\n    });\n\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getIdToken = this.getIdToken.bind(this);\n    this.renewSession = this.renewSession.bind(this);\n  }\n\n  _createClass(Auth, [{\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }, {\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      return new _Promise(function (resolve) {\n        _this.auth0.parseHash(function (err, authResult) {\n          var user_details = _this.extractInfoFromHash();\n\n          if (authResult && authResult.accessToken && authResult.idToken) {\n            _this.setSession(authResult, user_details);\n\n            resolve(true);\n          } else if (err) {\n            console.log(err);\n            alert(\"Error: \".concat(err.error, \". Check the console for further details.\"));\n            resolve(false);\n            window.location.replace(\"/\");\n          }\n        });\n      });\n    }\n  }, {\n    key: \"getAccessToken\",\n    value: function getAccessToken() {\n      return this.accessToken;\n    }\n  }, {\n    key: \"getIdToken\",\n    value: function getIdToken() {\n      return this.idToken;\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult, user_details) {\n      // Set isLoggedIn flag in localStorage\n      localStorage.setItem(\"isLoggedIn\", \"true\");\n      localStorage.setItem(\"user_details\", _JSON$stringify(user_details.user_details)); // Set the time that the access token will expire at\n\n      var expiresAt = authResult.expiresIn * 1000 + new Date().getTime();\n      this.accessToken = authResult.accessToken;\n      this.idToken = authResult.idToken;\n      this.expiresAt = expiresAt; // navigate to the home route\n      //history.replace('/home');\n    }\n  }, {\n    key: \"renewSession\",\n    value: function renewSession() {\n      var _this2 = this;\n\n      this.auth0.checkSession({}, function (err, authResult) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          _this2.setSession(authResult);\n        } else if (err) {\n          _this2.logout();\n\n          console.log(err);\n          alert(\"Could not get a new token (\".concat(err.error, \": \").concat(err.error_description, \").\"));\n        }\n      });\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Remove tokens and expiry time\n      this.accessToken = null;\n      this.idToken = null;\n      this.expiresAt = 0; // Remove isLoggedIn flag from localStorage\n\n      localStorage.removeItem(\"isLoggedIn\");\n      localStorage.removeItem(\"user_details\"); // navigate to the home route\n\n      window.location.replace(\"/\");\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      // Check whether the current time is past the\n      // access token's expiry time\n      var expiresAt = this.expiresAt;\n      return new Date().getTime() < expiresAt;\n    }\n  }, {\n    key: \"isLoggedIn\",\n    value: function (_isLoggedIn) {\n      function isLoggedIn() {\n        return _isLoggedIn.apply(this, arguments);\n      }\n\n      isLoggedIn.toString = function () {\n        return _isLoggedIn.toString();\n      };\n\n      return isLoggedIn;\n    }(function () {\n      console.log(localStorage);\n      /* var user_data = localStorage.getItem(\"user_details\");\n      var isLoggedIn = localStorage.getItem(\"isLoggedIn\");\n      */\n\n      if (!isLoggedIn || !user_data) {\n        return false;\n      } else {\n        return true;\n      }\n    })\n  }]);\n\n  return Auth;\n}();\n\nexport { Auth as default };","map":{"version":3,"sources":["/home/admin/Desktop/acamica/client/lib/Auth.js"],"names":["auth0","AUTH_CONFIG","jwtDecode","getQueryParams","params","window","location","href","replace","$0","$1","$2","$3","Auth","WebAuth","domain","clientID","clientId","redirectUri","callbackUrl","responseType","scope","process","server","id_token","token","user_details","login","bind","logout","handleAuthentication","isAuthenticated","getAccessToken","getIdToken","renewSession","authorize","resolve","parseHash","err","authResult","extractInfoFromHash","accessToken","idToken","setSession","console","log","alert","error","localStorage","setItem","expiresAt","expiresIn","Date","getTime","checkSession","error_description","removeItem","isLoggedIn","user_data"],"mappings":"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","sourcesContent":["import auth0 from \"auth0-js\";\nimport { AUTH_CONFIG } from \"./auth0-variables\";\nimport jwtDecode from \"jwt-decode\";\n\nconst getQueryParams = () => {\n  const params = {};\n  window.location.href.replace(\n    /([^(?|#)=&]+)(=([^&]*))?/g,\n    ($0, $1, $2, $3) => {\n      params[$1] = $3;\n    }\n  );\n  return params;\n};\n\nexport default class Auth {\n  accessToken;\n  idToken;\n  expiresAt;\n\n  auth0 = new auth0.WebAuth({\n    domain: AUTH_CONFIG.domain,\n    clientID: AUTH_CONFIG.clientId,\n    redirectUri: AUTH_CONFIG.callbackUrl,\n    responseType: \"token id_token\",\n    scope: \"openid profile email\"\n  });\n\n  constructor() {\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getIdToken = this.getIdToken.bind(this);\n    this.renewSession = this.renewSession.bind(this);\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  extractInfoFromHash = () => {\n    if (process.server) return;\n    const { id_token } = getQueryParams();\n    return {\n      token: id_token,\n      user_details: jwtDecode(id_token)\n    };\n  };\n\n  getQueryParams = () => {\n    const params = {};\n    window.location.href.replace(\n      /([^(?|#)=&]+)(=([^&]*))?/g,\n      ($0, $1, $2, $3) => {\n        params[$1] = $3;\n      }\n    );\n    return params;\n  };\n\n  handleAuthentication() {\n    return new Promise(resolve => {\n      this.auth0.parseHash((err, authResult) => {\n        var user_details = this.extractInfoFromHash();\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult, user_details);\n          resolve(true);\n        } else if (err) {\n          console.log(err);\n          alert(`Error: ${err.error}. Check the console for further details.`);\n          resolve(false);\n          window.location.replace(\"/\");\n        }\n      });\n    });\n  }\n\n  getAccessToken() {\n    return this.accessToken;\n  }\n\n  getIdToken() {\n    return this.idToken;\n  }\n\n  setSession(authResult, user_details) {\n    // Set isLoggedIn flag in localStorage\n    localStorage.setItem(\"isLoggedIn\", \"true\");\n    localStorage.setItem(\n      \"user_details\",\n      JSON.stringify(user_details.user_details)\n    );\n\n    // Set the time that the access token will expire at\n    let expiresAt = authResult.expiresIn * 1000 + new Date().getTime();\n    this.accessToken = authResult.accessToken;\n    this.idToken = authResult.idToken;\n    this.expiresAt = expiresAt;\n\n    // navigate to the home route\n    //history.replace('/home');\n  }\n\n  renewSession() {\n    this.auth0.checkSession({}, (err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult);\n      } else if (err) {\n        this.logout();\n        console.log(err);\n        alert(\n          `Could not get a new token (${err.error}: ${err.error_description}).`\n        );\n      }\n    });\n  }\n\n  logout() {\n    // Remove tokens and expiry time\n    this.accessToken = null;\n    this.idToken = null;\n    this.expiresAt = 0;\n\n    // Remove isLoggedIn flag from localStorage\n    localStorage.removeItem(\"isLoggedIn\");\n    localStorage.removeItem(\"user_details\");\n\n    // navigate to the home route\n    window.location.replace(\"/\");\n  }\n\n  isAuthenticated() {\n    // Check whether the current time is past the\n    // access token's expiry time\n    let expiresAt = this.expiresAt;\n    return new Date().getTime() < expiresAt;\n  }\n\n  isLoggedIn() {\n    console.log(localStorage)\n    /* var user_data = localStorage.getItem(\"user_details\");\n    var isLoggedIn = localStorage.getItem(\"isLoggedIn\");\n */\n    if (!isLoggedIn || !user_data) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}