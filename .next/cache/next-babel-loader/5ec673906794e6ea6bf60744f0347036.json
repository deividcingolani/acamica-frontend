{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport auth0 from 'auth0-js';\nimport { AUTH_CONFIG } from './auth0-variables';\nimport jwtDecode from 'jwt-decode';\n\nvar getQueryParams = function getQueryParams() {\n  var params = {};\n  window.location.href.replace(/([^(?|#)=&]+)(=([^&]*))?/g, function ($0, $1, $2, $3) {\n    params[$1] = $3;\n  });\n  return params;\n};\n\nvar Auth =\n/*#__PURE__*/\nfunction () {\n  function Auth() {\n    _classCallCheck(this, Auth);\n\n    _defineProperty(this, \"accessToken\", void 0);\n\n    _defineProperty(this, \"idToken\", void 0);\n\n    _defineProperty(this, \"expiresAt\", void 0);\n\n    _defineProperty(this, \"auth0\", new auth0.WebAuth({\n      domain: AUTH_CONFIG.domain,\n      clientID: AUTH_CONFIG.clientId,\n      redirectUri: AUTH_CONFIG.callbackUrl,\n      responseType: 'token id_token',\n      scope: 'openid profile email'\n    }));\n\n    _defineProperty(this, \"extractInfoFromHash\", function () {\n      if (process.server) return;\n\n      var _getQueryParams = getQueryParams(),\n          id_token = _getQueryParams.id_token;\n\n      return {\n        token: id_token,\n        user_details: jwtDecode(id_token)\n      };\n    });\n\n    _defineProperty(this, \"getQueryParams\", function () {\n      var params = {};\n      window.location.href.replace(/([^(?|#)=&]+)(=([^&]*))?/g, function ($0, $1, $2, $3) {\n        params[$1] = $3;\n      });\n      return params;\n    });\n\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getIdToken = this.getIdToken.bind(this);\n    this.renewSession = this.renewSession.bind(this);\n  }\n\n  _createClass(Auth, [{\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }, {\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      return new _Promise(function (resolve) {\n        _this.auth0.parseHash(function (err, authResult) {\n          var user_details = _this.extractInfoFromHash();\n\n          if (authResult && authResult.accessToken && authResult.idToken) {\n            _this.setSession(authResult, user_details);\n\n            resolve(true);\n          } else if (err) {\n            console.log(err);\n            alert(\"Error: \".concat(err.error, \". Check the console for further details.\"));\n            resolve(false);\n            window.location.replace('/');\n          }\n        });\n      });\n    }\n  }, {\n    key: \"getAccessToken\",\n    value: function getAccessToken() {\n      return this.accessToken;\n    }\n  }, {\n    key: \"getIdToken\",\n    value: function getIdToken() {\n      return this.idToken;\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult, user_details) {\n      // Set isLoggedIn flag in localStorage\n      localStorage.setItem('isLoggedIn', 'true');\n      localStorage.setItem('user_details', _JSON$stringify(user_details.user_details)); // Set the time that the access token will expire at\n\n      var expiresAt = authResult.expiresIn * 1000 + new Date().getTime();\n      this.accessToken = authResult.accessToken;\n      this.idToken = authResult.idToken;\n      this.expiresAt = expiresAt; // navigate to the home route\n      //history.replace('/home');\n    }\n  }, {\n    key: \"renewSession\",\n    value: function renewSession() {\n      var _this2 = this;\n\n      this.auth0.checkSession({}, function (err, authResult) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          _this2.setSession(authResult);\n        } else if (err) {\n          _this2.logout();\n\n          console.log(err);\n          alert(\"Could not get a new token (\".concat(err.error, \": \").concat(err.error_description, \").\"));\n        }\n      });\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Remove tokens and expiry time\n      this.accessToken = null;\n      this.idToken = null;\n      this.expiresAt = 0; // Remove isLoggedIn flag from localStorage\n\n      localStorage.removeItem('isLoggedIn');\n      localStorage.removeItem('user_details'); // navigate to the home route\n\n      window.location.replace('/');\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      // Check whether the current time is past the\n      // access token's expiry time\n      var expiresAt = this.expiresAt;\n      return new Date().getTime() < expiresAt;\n    }\n  }]);\n\n  return Auth;\n}();\n\nexport { Auth as default };","map":null,"metadata":{},"sourceType":"module"}