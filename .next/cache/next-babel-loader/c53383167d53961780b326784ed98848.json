{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport auth0 from 'auth0-js';\nimport { AUTH_CONFIG } from './auth0-variables';\nimport jwtDecode from 'jwt-decode';\n\nconst getQueryParams = () => {\n  const params = {};\n  window.location.href.replace(/([^(?|#)=&]+)(=([^&]*))?/g, ($0, $1, $2, $3) => {\n    params[$1] = $3;\n  });\n  return params;\n};\n\nexport default class Auth {\n  constructor() {\n    _defineProperty(this, \"accessToken\", void 0);\n\n    _defineProperty(this, \"idToken\", void 0);\n\n    _defineProperty(this, \"expiresAt\", void 0);\n\n    _defineProperty(this, \"auth0\", new auth0.WebAuth({\n      domain: AUTH_CONFIG.domain,\n      clientID: AUTH_CONFIG.clientId,\n      redirectUri: AUTH_CONFIG.callbackUrl,\n      responseType: 'token id_token',\n      scope: 'openid profile email'\n    }));\n\n    _defineProperty(this, \"extractInfoFromHash\", () => {\n      if (process.server) return;\n      const {\n        id_token\n      } = getQueryParams();\n      return {\n        token: id_token,\n        user_details: jwtDecode(id_token)\n      };\n    });\n\n    _defineProperty(this, \"getQueryParams\", () => {\n      const params = {};\n      window.location.href.replace(/([^(?|#)=&]+)(=([^&]*))?/g, ($0, $1, $2, $3) => {\n        params[$1] = $3;\n      });\n      return params;\n    });\n\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getIdToken = this.getIdToken.bind(this);\n    this.renewSession = this.renewSession.bind(this);\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  handleAuthentication() {\n    return new Promise(resolve => {\n      this.auth0.parseHash((err, authResult) => {\n        var user_details = this.extractInfoFromHash();\n\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult, user_details);\n          resolve(true);\n        } else if (err) {\n          console.log(err);\n          alert(`Error: ${err.error}. Check the console for further details.`);\n          resolve(false);\n          window.location.replace('/');\n        }\n      });\n    });\n  }\n\n  getAccessToken() {\n    return this.accessToken;\n  }\n\n  getIdToken() {\n    return this.idToken;\n  }\n\n  setSession(authResult, user_details) {\n    // Set isLoggedIn flag in localStorage\n    localStorage.setItem('isLoggedIn', 'true');\n    localStorage.setItem('user_details', JSON.stringify(user_details.user_details)); // Set the time that the access token will expire at\n\n    let expiresAt = authResult.expiresIn * 1000 + new Date().getTime();\n    this.accessToken = authResult.accessToken;\n    this.idToken = authResult.idToken;\n    this.expiresAt = expiresAt; // navigate to the home route\n    //history.replace('/home');\n  }\n\n  renewSession() {\n    this.auth0.checkSession({}, (err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult);\n      } else if (err) {\n        this.logout();\n        console.log(err);\n        alert(`Could not get a new token (${err.error}: ${err.error_description}).`);\n      }\n    });\n  }\n\n  logout() {\n    // Remove tokens and expiry time\n    this.accessToken = null;\n    this.idToken = null;\n    this.expiresAt = 0; // Remove isLoggedIn flag from localStorage\n\n    localStorage.removeItem('isLoggedIn');\n    localStorage.removeItem('user_details'); // navigate to the home route\n\n    window.location.replace('/');\n  }\n\n  isAuthenticated() {\n    // Check whether the current time is past the\n    // access token's expiry time\n    let expiresAt = this.expiresAt;\n    return new Date().getTime() < expiresAt;\n  }\n\n}","map":{"version":3,"sources":["/app/lib/Auth.js"],"names":["auth0","AUTH_CONFIG","jwtDecode","getQueryParams","params","window","location","href","replace","$0","$1","$2","$3","Auth","constructor","WebAuth","domain","clientID","clientId","redirectUri","callbackUrl","responseType","scope","process","server","id_token","token","user_details","login","bind","logout","handleAuthentication","isAuthenticated","getAccessToken","getIdToken","renewSession","authorize","Promise","resolve","parseHash","err","authResult","extractInfoFromHash","accessToken","idToken","setSession","console","log","alert","error","localStorage","setItem","JSON","stringify","expiresAt","expiresIn","Date","getTime","checkSession","error_description","removeItem"],"mappings":"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","sourcesContent":["import auth0 from 'auth0-js';\nimport {AUTH_CONFIG} from './auth0-variables';\nimport jwtDecode from 'jwt-decode'\n\nconst getQueryParams = () => {\n    const params = {}\n    window.location.href.replace(/([^(?|#)=&]+)(=([^&]*))?/g, ($0, $1, $2, $3) => {\n        params[$1] = $3\n    })\n    return params\n}\n\nexport default class Auth {\n    accessToken;\n    idToken;\n    expiresAt;\n\n    auth0 = new auth0.WebAuth({\n        domain: AUTH_CONFIG.domain,\n        clientID: AUTH_CONFIG.clientId,\n        redirectUri: AUTH_CONFIG.callbackUrl,\n        responseType: 'token id_token',\n        scope: 'openid profile email'\n    });\n\n    constructor() {\n        this.login = this.login.bind(this);\n        this.logout = this.logout.bind(this);\n        this.handleAuthentication = this.handleAuthentication.bind(this);\n        this.isAuthenticated = this.isAuthenticated.bind(this);\n        this.getAccessToken = this.getAccessToken.bind(this);\n        this.getIdToken = this.getIdToken.bind(this);\n        this.renewSession = this.renewSession.bind(this);\n    }\n\n    login() {\n        this.auth0.authorize();\n    }\n\n    extractInfoFromHash = () => {\n        if (process.server) return;\n        const {id_token} = getQueryParams();\n        return {\n            token: id_token,\n            user_details: (jwtDecode(id_token))\n        }\n    }\n\n    getQueryParams = () => {\n        const params = {}\n        window.location.href.replace(/([^(?|#)=&]+)(=([^&]*))?/g, ($0, $1, $2, $3) => {\n            params[$1] = $3\n        })\n        return params\n    }\n\n\n    handleAuthentication() {\n        return new Promise((resolve)=>{\n            this.auth0.parseHash((err, authResult) => {\n                var user_details = this.extractInfoFromHash()\n                if (authResult && authResult.accessToken && authResult.idToken) {\n                    this.setSession(authResult, user_details);\n                    resolve(true);\n                } else if (err) {\n                    console.log(err);\n                    alert(`Error: ${err.error}. Check the console for further details.`);\n                    resolve(false);\n                    window.location.replace('/');\n                }\n            \n            });\n        })\n        \n    }\n\n    getAccessToken() {\n        return this.accessToken;\n    }\n\n    getIdToken() {\n        return this.idToken;\n    }\n\n    setSession(authResult, user_details) {\n        // Set isLoggedIn flag in localStorage\n        localStorage.setItem('isLoggedIn', 'true');\n        localStorage.setItem('user_details', JSON.stringify(user_details.user_details));\n\n        // Set the time that the access token will expire at\n        let expiresAt = (authResult.expiresIn * 1000) + new Date().getTime();\n        this.accessToken = authResult.accessToken;\n        this.idToken = authResult.idToken;\n        this.expiresAt = expiresAt;\n\n        // navigate to the home route\n        //history.replace('/home');\n    }\n\n    renewSession() {\n        this.auth0.checkSession({}, (err, authResult) => {\n            if (authResult && authResult.accessToken && authResult.idToken) {\n                this.setSession(authResult);\n            } else if (err) {\n                this.logout();\n                console.log(err);\n                alert(`Could not get a new token (${err.error}: ${err.error_description}).`);\n            }\n        });\n    }\n\n    logout() {\n        // Remove tokens and expiry time\n        this.accessToken = null;\n        this.idToken = null;\n        this.expiresAt = 0;\n\n        // Remove isLoggedIn flag from localStorage\n        localStorage.removeItem('isLoggedIn');\n        localStorage.removeItem('user_details');\n\n        // navigate to the home route\n        window.location.replace('/');\n    }\n\n    isAuthenticated() {\n        // Check whether the current time is past the\n        // access token's expiry time\n        let expiresAt = this.expiresAt;\n        return new Date().getTime() < expiresAt;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}